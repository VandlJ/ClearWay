name: ClearWay CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  create-vm:
    name: Create VM
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      vm_ip: ${{ steps.extract_vm_ip.outputs.vm_ip }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.1

      # Create SSH key for GitHub Actions runner
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub

      # Create terraform.tfvars file with secrets
      - name: Create terraform.tfvars
        run: |
          cat > terraform.tfvars << EOF
          one_username = "${{ secrets.ONE_USERNAME }}"
          one_password = "${{ secrets.ONE_TOKEN }}"
          one_endpoint = "${{ secrets.ONE_ENDPOINT }}"
          vm_ssh_pubkey = "~/.ssh/id_rsa.pub"
          vm_image_name = "Ubuntu 22.04"
          vm_image_url = "https://marketplace.opennebula.io//appliance/4562be1a-4c11-4e9e-b60a-85a045f1de05/download/0"
          vm_instance_count = 1
          EOF
          
      # Create outputs.tf file
      - name: Create outputs.tf
        run: |
          cat > outputs.tf << EOF
          output "vm_ip" {
            description = "The IP address of the provisioned VM"
            value       = opennebula_virtual_machine.vm[0].ip
          }
          EOF
          
      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
      
      # Apply Terraform
      - name: Terraform Apply
        run: terraform apply -auto-approve

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: create-vm
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Generate build timestamp
        id: timestamp
        run: echo "timestamp=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Build and push frontend image
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/clearway-frontend:latest
      
      # Build and push backend image
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/clearway-backend:latest
      
      # Setup SSH for deployment
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts
      
      # Install Docker and Docker Compose on VM
      - name: Install Docker on VM
        run: |
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << 'EOF'
            # Update package lists
            sudo apt-get update
            
            # Install prerequisites
            sudo apt-get install -y \
              apt-transport-https \
              ca-certificates \
              curl \
              gnupg \
              lsb-release
            
            # Add Docker's official GPG key
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            
            # Set up the stable repository
            echo \
              "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            
            # Install Docker Engine
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            
            # Add current user to the docker group to run docker without sudo
            sudo usermod -aG docker $USER
            
            # Install Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            
            # Create symlink for docker compose
            sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            
            # Verify installations
            docker --version
            docker compose version
          EOF
          
          # Create a new SSH session to apply the new group membership
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} "id"
      

      # Ensure required directories exist on the VM
      - name: Ensure deployment directories exist
        run: |
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} "mkdir -p ~/clearway"
      
      # Clean up and prepare for deployment
      - name: Clean up disk space on VM
        run: |
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << 'EOF'
            # Stop and remove existing containers to avoid conflicts
            docker compose down || true
            docker rm -f clearway-frontend clearway-backend || true
            
            # Clean up docker system
            docker system prune -af --volumes || true
          EOF
      
      # Create docker-compose.yml on the VM
      - name: Create docker-compose.yml on VM
        run: |
          cat > docker-compose.yml << EOF
          version: '3'

          services:
            frontend:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/clearway-frontend:latest
              container_name: clearway-frontend
              restart: unless-stopped
              ports:
                - "3000:3000"
              depends_on:
                - backend

            backend:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/clearway-backend:latest
              container_name: clearway-backend
              restart: unless-stopped
              ports:
                - "8080:8080"
              volumes:
                - ./data:/app/data

          networks:
            default:
              name: clearway_network
          EOF
          
          scp docker-compose.yml ${{ secrets.VM_USER }}@${{ secrets.VM_IP }}:~/clearway/
      
      # Login to DockerHub on VM and deploy
      - name: Deploy to VM
        run: |
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << EOF
            # Login to DockerHub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # Navigate to deployment directory
            cd ~/clearway
            
            # Pull latest images
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/clearway-frontend:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/clearway-backend:latest
            
            # Start services
            docker compose up -d
            
            # Verify deployment
            docker ps
          EOF