name: ClearWay CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Generate build timestamp
        id: timestamp
        run: echo "timestamp=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Build and push frontend image
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/clearway-frontend:latest
      
      # Build and push backend image
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/clearway-backend:latest
      
      # Setup SSH for deployment
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts
      
      # Clean up and prepare for deployment
      - name: Clean up disk space on VM
        run: |
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << 'EOF'
            # Stop and remove existing containers to avoid conflicts
            docker compose down || true
            docker rm -f clearway-frontend clearway-backend || true
            
            # Clean up docker system
            docker system prune -af --volumes || true
            
            # Create deployment directory if it doesn't exist
            mkdir -p ~/clearway
          EOF
      
      # Create docker-compose.yml on the VM
      - name: Create docker-compose.yml on VM
        run: |
          cat > docker-compose.yml << EOF
          version: '3'

          services:
            frontend:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/clearway-frontend:latest
              container_name: clearway-frontend
              restart: unless-stopped
              ports:
                - "3000:3000"
              depends_on:
                - backend

            backend:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/clearway-backend:latest
              container_name: clearway-backend
              restart: unless-stopped
              ports:
                - "8080:8080"
              volumes:
                - ./data:/app/data

          networks:
            default:
              name: clearway_network
          EOF
          
          scp docker-compose.yml ${{ secrets.VM_USER }}@${{ secrets.VM_IP }}:~/clearway/
      
      # Login to DockerHub on VM and deploy
      - name: Deploy to VM
        run: |
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << EOF
            # Login to DockerHub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # Navigate to deployment directory
            cd ~/clearway
            
            # Pull latest images
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/clearway-frontend:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/clearway-backend:latest
            
            # Start services
            docker compose up -d
            
            # Verify deployment
            docker ps
          EOF