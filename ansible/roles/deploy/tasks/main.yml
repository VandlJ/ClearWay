---
- name: Create deployment directory
  ansible.builtin.file:
    path: "{{ app_base_dir }}/{{ app_name }}-{{ app_version }}"
    state: directory
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
    mode: '0755'
  become: yes
  register: new_deployment_dir

- name: Check available disk space
  ansible.builtin.shell: df -h
  register: disk_space
  become: yes

- name: Display disk space information
  ansible.builtin.debug:
    var: disk_space.stdout_lines

- name: Clean up disk space if needed
  ansible.builtin.shell: |
    # Remove old npm caches
    npm cache clean --force
    
    # Remove old deployment directories keeping the 2 most recent
    cd {{ app_base_dir }}
    ls -dt {{ app_name }}-* | tail -n +3 | xargs -r rm -rf
    
    # Clear any temporary files
    rm -rf /tmp/npm-*
    
    # Clear old logs
    find /var/log -type f -name "*.log.*" -mtime +7 -delete 2>/dev/null || true
    find /var/log -type f -name "*.gz" -mtime +7 -delete 2>/dev/null || true
    
    # Clean Docker resources if Docker is installed
    if command -v docker &> /dev/null; then
      # Remove unused Docker resources
      docker system prune -af --volumes
      
      # Keep only the last 3 versions of each image
      for image in $(docker images --format {% raw %}"{{.Repository}}"{% endraw %} | sort | uniq); do
        if [[ "$image" == *"clearway"* ]]; then
          image_count=$(docker images --format {% raw %}"{{.Repository}}:{{.Tag}}"{% endraw %} | grep "$image" | wc -l)
          if [ "$image_count" -gt 3 ]; then
            echo "Cleaning old versions of $image..."
            docker images --format {% raw %}"{{.Repository}}:{{.Tag}} {{.CreatedAt}}"{% endraw %} | grep "$image" | sort -k2 | head -n -3 | awk '{print $1}' | xargs -r docker rmi || true
          fi
        fi
      done
    fi
    
    # Clean apt cache if using Ubuntu/Debian
    if command -v apt-get &> /dev/null; then
        apt-get clean
        apt-get autoremove -y
    fi
    
    # Check space again
    df -h /
  args:
    executable: /bin/bash
  register: cleanup_result
  become: yes

- name: Display disk space after cleanup
  ansible.builtin.debug:
    var: cleanup_result.stdout_lines

- name: Ensure Docker is installed
  ansible.builtin.package:
    name: 
      - docker.io
      - python3-docker
    state: present
  become: yes

- name: Ensure Docker service is running
  ansible.builtin.systemd:
    name: docker
    state: started
    enabled: yes
  become: yes

- name: Add deploy user to docker group
  ansible.builtin.user:
    name: "{{ deploy_user }}"
    groups: docker
    append: yes
  become: yes

- name: Login to DockerHub
  community.docker.docker_login:
    username: "{{ docker_username }}"
    password: "{{ lookup('env', 'DOCKERHUB_TOKEN') }}"
    state: present
  become: yes
  become_user: "{{ deploy_user }}"

- name: Create docker-compose.yml file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ new_deployment_dir.path }}/docker-compose.yml"
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
    mode: '0644'
  become: yes

- name: Pull Docker images
  community.docker.docker_image:
    name: "{{ item }}"
    source: pull
    force_source: yes
  become: yes
  become_user: "{{ deploy_user }}"
  with_items:
    - "{{ frontend_image }}"
    - "{{ backend_image }}"
    - "{{ nginx_image }}"

- name: Create data directory for backend
  ansible.builtin.file:
    path: "{{ new_deployment_dir.path }}/data"
    state: directory
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
    mode: '0755'
  become: yes

- name: Stop existing Docker Compose services
  community.docker.docker_compose_v2:
    project_src: "{{ app_base_dir }}/latest"
    state: absent
    remove_images: local
  ignore_errors: yes
  become: yes
  become_user: "{{ deploy_user }}"
  when: app_base_dir + '/latest' is directory

- name: Start Docker Compose services
  community.docker.docker_compose_v2:
    project_src: "{{ new_deployment_dir.path }}"
    state: present
  become: yes
  become_user: "{{ deploy_user }}"

- name: Update symbolic link to latest deployment
  ansible.builtin.file:
    src: "{{ new_deployment_dir.path }}"
    dest: "{{ app_base_dir }}/latest"
    state: link
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
  become: yes

- name: Create systemd service for Docker Compose
  ansible.builtin.template:
    src: clearway-docker.service.j2
    dest: /etc/systemd/system/clearway-docker.service
    owner: root
    group: root
    mode: '0644'
  become: yes
  notify:
    - Reload systemd
    - Restart Docker service